class NodeValue{
    public:
        int maxNode, minNode, maxSize;
        
        NodeValue(int minNode, int maxNode, int maxSize){
            this->maxNode = maxNode;
            this->minNode = minNode;
            this->maxSize = maxSize;
        }
};

class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    NodeValue largestBstHelper(Node *root){
        if(!root){
            return NodeValue(INT_MAX, INT_MIN, 0);
        }
        auto left = largestBstHelper(root->left);
        auto right = largestBstHelper(root->right);
        
        if(root->data>left.maxNode and root->data<right.minNode){
            return NodeValue(min(root->data,left.minNode), max(root->data,right.maxNode), 
            left.maxSize + right.maxSize + 1);
        }
        return NodeValue(INT_MIN, INT_MAX, max(left.maxSize, right.maxSize));
        
    }
    int largestBst(Node *root)
    {
    	//Your code here
    	return largestBstHelper(root).maxSize;
    }
};
