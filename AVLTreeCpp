class Solution{
  public:
    int height(Node *N){
        if (N == NULL)
            return 0;
        return N->height;
    }
    
    Node* rightRotate(Node *y){
        Node* x = y->left;
        Node* T2 = x->right;
        
        y->left = T2;
        x->right = y;
        
        y->height = max(height(y->left),height(y->right)) + 1;
        x->height = max(height(x->left),height(x->right)) + 1;
        
        return x;
    }
    
    Node* leftRotate(Node* y){
        Node* x = y->right;
        Node* T2 = x->left;
        
        y->right = T2;
        x->left = y;
        
        y->height = max(height(y->left),height(y->right)) + 1;
        x->height = max(height(x->left),height(x->right)) + 1;
        
        return x;
    }
    
    int getBalance(Node *N){
        if (N == NULL)
            return 0;
        return height(N->left) - height(N->right);
    }

    Node* insertToAVL(Node* node, int data)
    {
        if(node == NULL){
            return new Node(data);
        }
        
        if(data<node->data) node->left = insertToAVL(node->left,data);
        else if(data>node->data) node->right = insertToAVL(node->right,data);
        else return node;
        
        //Update height
        node->height = 1 + max(height(node->left),height(node->right));
        
        int balance = getBalance(node);
        
        //Left Left
        if(balance>1 and data < node->left->data){
            return rightRotate(node);
        }
        
        //Right Right
        else if(balance<-1 and data > node->right->data){
            return leftRotate(node);
        }
        
        //Left Right
        else if(balance>1 and data > node->left->data){
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        
        //Right Left
        else if(balance<-1 and data < node->right->data){
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
        
        //return node unchanged 
        return node;
    }
};
