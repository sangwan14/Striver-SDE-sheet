/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int postorderIndex;
    unordered_map<int,int> umap;
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
      postorderIndex = postorder.size()-1;
       for(int i=0;i<inorder.size();i++){
           umap[inorder[i]] = i;
       }
    
       return helper(postorder,0,postorder.size()-1); 
    }
    
    TreeNode* helper(vector<int>& postorder,int left, int right){
        if(left>right) return NULL;
        int rootValue = postorder[postorderIndex--];
        TreeNode* root = new TreeNode(rootValue);
        int idx = umap[rootValue];
        root->right = helper(postorder,idx+1,right);   
        root->left = helper(postorder,left,idx-1);
        return root;
    }      
};
