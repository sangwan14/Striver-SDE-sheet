/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        TreeNode* curr = root;
        while(curr){
            if(curr->left){
                TreeNode* predecessor = find(curr->left, curr);
                
                //if thread already present, print, remove the thread & move to right subtree
                if(predecessor->right){
                    predecessor->right = NULL;
                    v.push_back(curr->val);
                    curr = curr->right;
                }
                
                //create a thread, move to left subtree of curr
                else{
                    predecessor->right = curr;
                    curr = curr->left;
                }
            }
            else{
                v.push_back(curr->val);
                curr = curr->right;
            }
        }
        return v;
    }
    
    //return predecessor to the curr node
    TreeNode* find(TreeNode* node, TreeNode* curr){
        while(node->right and node->right!=curr){
            node = node->right;
        }
        return node;
    }
};
