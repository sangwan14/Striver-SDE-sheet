/* Classic two sum array approach - TC : O(N*H), SC : O(1) 

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        TreeNode *start = root;
        while(start->left){
            start = start->left;
        }
        
        TreeNode *end = root;
        while(end->right){
            end = end->right;
        }
        
        while(start!=end){
            if(start->val + end->val < k) {
                successor(root,start,start->val);
            }
            else if(start->val + end->val >k){
                predecessor(root,end,end->val);                
            }
            else return true;
        }
        
        return false;
    } 
    void predecessor(TreeNode* root, TreeNode*& pre, int key) {
        while(root!=0)
        {
            if(key<=root->val)
            {
                root=root->left;
            }
            else
            {
                pre=root;
                root=root->right;
            }
        }
    }
    void successor(TreeNode* root, TreeNode*& suc, int key){
        while(root!=0)
        {
            if(key>= root->val)
            {
                root=root->right;
            }
            else
            {
                suc=root;
                root=root->left;
            }
        }
    }
};

*/

/* DFS and binary search 

class Solution {
public:
    bool findTarget(TreeNode* root, int& k) {
        return dfs(root,root,k);
    }
    bool dfs(TreeNode*& root, TreeNode* curr, int& k){
        if(!curr) return false;
        return searchBST(root,curr,k-curr->val) || dfs(root,curr->left,k) || dfs(root,curr->right,k);
    }
    bool searchBST(TreeNode* root, TreeNode*& curr, const int& val) {
        if(!root) return false;
        return root->val==val && curr!=root || root->val>val && searchBST(root->left,curr,val) || root->val<val && searchBST(root->right,curr,val);
    }
};

*/
