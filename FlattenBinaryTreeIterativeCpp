/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode* curr = root;
        
         while(curr){
            if(curr->left){
                
                TreeNode* predecessor = findPredecessor(curr->left, curr);
                                
                if(predecessor->right){
                    predecessor->right = curr->right;
                    curr->right = curr->left;
                    curr->left = NULL;
                    curr = predecessor->right;
                } 
                
                else{
                    predecessor->right = curr;
                    curr = curr->left;
                }
            }
            
            else{
                curr = curr->right;  
            }
         }
    }
    
    TreeNode* findPredecessor(TreeNode* node, TreeNode* curr){
 
         while(node->right and node->right!=curr){
            node = node->right;
        }
        
        return node;
    }
    
};
