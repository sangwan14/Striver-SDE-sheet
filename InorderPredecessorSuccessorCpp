/* Method 1 - Time Complexity : O(2H), Space Complexity : O(1)

void prede(Node* root, Node*& pre, int key)
{
    while(root!=0)
    {
        if(key<=root->key)
        {
            root=root->left;
        }
        else
        {
            pre=root;
            root=root->right;
        }
    }
}
void succe(Node* root, Node*& suc, int key)
{
    while(root!=0)
    {
        if(key>= root->key)
        {
            root=root->right;
        }
        else
        {
            suc=root;
            root=root->left;
        }
    }
}
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    prede(root,pre,key);
    succe(root,suc,key);
}

*/

/*  Method 2 - Time Complexity : O(H), Space Complexity : O(1)

void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    while(root and root->key!=key){
        if(key<root->key) {
            suc = root;
            root = root->left;
        }
        else{
            pre = root;
            root = root->right;
        }
    }
    
    if(root and root->key==key){
        if(root->left){
            Node* curr = root->left;
            while(curr){
                pre = curr;
                curr = curr->right;
            }
        }
        if(root->right) {
            Node* curr = root->right;
            while(curr){
                suc = curr;
                curr = curr->left;
            }
        }
    }
}

*/
