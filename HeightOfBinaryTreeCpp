/* Depth First Search
 
 int maxDepth(TreeNode* root) {
        if(!root) return 0;
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        return max(left,right) + 1;
   }
 
 Time Complexity : O(N), Space Complexity : O(1) + O(H) 
*/
  
/* Breadth First Search 
  
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root) return 0;
        
        queue<TreeNode*> q;
        q.push(root);
        
        int depth = 0;
        while(q.size()){
            int size = q.size();
            depth++;
            for(int i=0;i<size;i++){
                TreeNode* curr = q.front();
                q.pop();
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
        }
        
        return depth;
    }
};      
    
    Time Complexity : O(N), Space Complexity : O(N)
 */
